C:\Git_Repos\mana_meeples_singles_market>pnpm --filter ./apps/api test

> @mana-meeples/api@ test C:\Git_Repos\mana_meeples_singles_market\apps\api
> vitest


 DEV  v2.1.9 C:/Git_Repos/mana_meeples_singles_market/apps/api

stdout | tests/integration/storefront.routes.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.txt

stdout | tests/e2e/checkout.flow.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt

stdout | tests/integration/error-handling.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt

stdout | tests/integration/inventory.routes.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt

stdout | tests/integration/auth.routes.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.txt

stdout | tests/integration/cards.search.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530374.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530374.txt

stdout | tests/integration/orders.routes.test.ts
📝 Test logging initialized:
   JSON: C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530375.json
   TXT:  C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530375.txt

stdout | tests/integration/inventory.routes.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: ✅ audit secrets and track compliance: https://dotenvx.com/ops

stdout | tests/integration/error-handling.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`

stdout | tests/e2e/checkout.flow.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: ⚙️  override existing env vars with { override: true }

stdout | tests/integration/inventory.routes.test.ts
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:38.567Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'admin', hasPassword: true }
🔍 Validating credentials...
✅ Credentials valid, generating token...
🎫 Token generated
🍪 Setting cookie with config: {
  httpOnly: true,
  secure: false,
  sameSite: 'strict',
  domain: '(current domain)'
}
📤 Sending response: { success: true, message: 'Login successful', expiresIn: '24h' }
✅ Response sent successfully

stdout | tests/integration/storefront.routes.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: ⚙️  suppress all logs with { quiet: true }

stdout | tests/integration/error-handling.test.ts > Error Handling > 400 Bad Request > returns 400 for malformed request body
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:38.606Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'MISSING', hasPassword: false }

stderr | tests/integration/error-handling.test.ts > Error Handling > 400 Bad Request > returns 400 for malformed request body
❌ Missing credentials

stderr | tests/integration/error-handling.test.ts > Error Handling > 401 Unauthorized > returns 401 for protected routes without auth
❌ No admin token found in cookies

stdout | tests/integration/error-handling.test.ts > Error Handling > Content-Type validation > requires JSON content-type for POST requests
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:38.627Z
🔑 Admin login attempt - handler entered

stderr | tests/integration/error-handling.test.ts > Error Handling > Content-Type validation > requires JSON content-type for POST requests
❌ Invalid request body

stdout | tests/integration/orders.routes.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: ✅ audit secrets and track compliance: https://dotenvx.com/ops

stdout | tests/integration/orders.routes.test.ts
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:39.261Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'admin', hasPassword: true }
🔍 Validating credentials...
✅ Credentials valid, generating token...
🎫 Token generated
🍪 Setting cookie with config: {
  httpOnly: true,
  secure: false,
  sameSite: 'strict',
  domain: '(current domain)'
}
📤 Sending response: { success: true, message: 'Login successful', expiresIn: '24h' }
✅ Response sent successfully

stdout | tests/integration/auth.routes.test.ts
[dotenv@17.2.3] injecting env (22) from .env -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

stdout | tests/integration/auth.routes.test.ts > POST /api/auth/admin/login > rejects login with missing credentials
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:39.419Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'MISSING', hasPassword: false }

stderr | tests/integration/auth.routes.test.ts > POST /api/auth/admin/login > rejects login with missing credentials
❌ Missing credentials

stdout | tests/integration/auth.routes.test.ts > POST /api/auth/admin/login > rejects login with invalid credentials
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:39.426Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'admin', hasPassword: true }
🔍 Validating credentials...
❌ Invalid credentials

stdout | tests/integration/error-handling.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json

stdout | tests/integration/cards.search.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530374.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530374.json

stdout | tests/integration/auth.routes.test.ts > POST /api/auth/admin/login > accepts valid admin credentials and sets cookie
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:40.442Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'admin', hasPassword: true }
🔍 Validating credentials...
✅ Credentials valid, generating token...
🎫 Token generated
🍪 Setting cookie with config: {
  httpOnly: true,
  secure: false,
  sameSite: 'strict',
  domain: '(current domain)'
}
📤 Sending response: { success: true, message: 'Login successful', expiresIn: '24h' }
✅ Response sent successfully

stdout | tests/integration/auth.routes.test.ts > POST /api/auth/admin/logout > clears the admin token cookie
🔐 AUTH POST /api/auth/admin/logout - 2025-10-22T17:35:40.450Z
🚪 Admin logout request

stdout | tests/integration/auth.routes.test.ts > GET /api/auth/admin/check > returns 401 when no token provided
🔐 AUTH GET /api/auth/admin/check - 2025-10-22T17:35:40.458Z
🔍 Admin auth check request
❌ No admin token found

stdout | tests/integration/auth.routes.test.ts > GET /api/auth/admin/check > returns authenticated status with valid token
🔐 AUTH POST /api/auth/admin/login - 2025-10-22T17:35:40.464Z
🔑 Admin login attempt - handler entered
📋 Credentials received: { username: 'admin', hasPassword: true }
🔍 Validating credentials...
✅ Credentials valid, generating token...
🎫 Token generated
🍪 Setting cookie with config: {
  httpOnly: true,
  secure: false,
  sameSite: 'strict',
  domain: '(current domain)'
}
📤 Sending response: { success: true, message: 'Login successful', expiresIn: '24h' }
✅ Response sent successfully

stdout | tests/integration/auth.routes.test.ts > GET /api/auth/admin/check > returns authenticated status with valid token
🔐 AUTH GET /api/auth/admin/check - 2025-10-22T17:35:40.474Z
🔍 Admin auth check request
🔍 Verifying token...
✅ Auth check successful for: admin

stdout | tests/integration/auth.routes.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.json

stdout | tests/integration/storefront.routes.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530372.json

stdout | tests/e2e/checkout.flow.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json

stdout | tests/integration/inventory.routes.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530373.json

stdout | tests/integration/orders.routes.test.ts

✅ Test environment logs written:
   📄 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530375.txt
   📊 C:\Git_Repos\mana_meeples_singles_market\apps\api\test-logs\test-env-1761154530375.json

 ❯ tests/e2e/checkout.flow.test.ts (6) 16917ms
   ❯ Complete Checkout Flow (E2E) (6) 7915ms
     × completes a full customer journey from browsing to order placement 1339ms
     × handles out-of-stock scenario gracefully 1502ms
     × handles concurrent orders for the same item 1282ms
     × allows admin to cancel an order and restore inventory 1284ms
     × validates customer input sanitization during checkout 1326ms
     × handles multiple items in a single order 1182ms
 ✓ tests/integration/auth.routes.test.ts (6) 11097ms
 ❯ tests/integration/cards.search.test.ts (1) 9765ms
   / [ beforeAll ]
   ↓ GET /api/cards/cards (1) [skipped]
 ✓ tests/integration/error-handling.test.ts (7) 9076ms
 ❯ tests/integration/inventory.routes.test.ts (16) 26011ms
   ❯ POST /api/admin/inventory (6) 7904ms
     × requires authentication 1277ms
       | [ beforeEach ]
     × creates new inventory with valid data 1346ms
       - [ beforeEach ]
     × updates existing inventory on conflict 1487ms
       - [ beforeEach ]
     × rejects invalid card_id 1277ms
       \ [ beforeEach ]
     × rejects negative stock quantity 1307ms
       \ [ beforeEach ]
     × rejects missing required fields 1210ms
       | [ beforeEach ]
   ❯ GET /api/admin/inventory (3) 2906ms
     × requires authentication 1093ms
       | [ beforeEach ]
     × returns paginated inventory list 890ms
       / [ beforeEach ]
     × filters inventory by card_id 923ms
       | [ beforeEach ]
   ❯ PATCH /api/admin/inventory/:id (4) 3605ms
     × requires authentication 897ms
       - [ beforeEach ]
     × updates inventory stock quantity 889ms
       / [ beforeEach ]
     × updates inventory price 907ms
       / [ beforeEach ]
     × returns 404 for non-existent inventory 912ms
       | [ beforeEach ]
   ❯ DELETE /api/admin/inventory/:id (3) 2657ms
     × requires authentication 880ms
       - [ beforeEach ]
     × deletes inventory item 886ms
       | [ beforeEach ]
     × returns 404 for non-existent inventory 891ms
       \ [ beforeEach ]
 ❯ tests/integration/orders.routes.test.ts (19) 27860ms
   ❯ POST /api/orders (6) 7897ms
     × creates a new order with valid data 1390ms
       \ [ beforeEach ]
     × validates required customer fields 1479ms
       | [ beforeEach ]
     × validates items array is not empty 1297ms
       - [ beforeEach ]
     × validates item quantity limits 1294ms
       / [ beforeEach ]
     × validates email format 1229ms
       | [ beforeEach ]
     × handles transaction rollback on inventory update failure 1208ms
       | [ beforeEach ]
   ❯ GET /api/admin/orders (5) 4460ms
     × requires authentication 906ms
       / [ beforeEach ]
     × returns paginated orders list 904ms
       - [ beforeEach ]
     × filters orders by status 876ms
       | [ beforeEach ]
     × supports pagination 886ms
       / [ beforeEach ]
     × searches orders by customer email 888ms
       / [ beforeEach ]
   ❯ GET /api/admin/orders/:id (3) 2700ms
     × requires authentication 907ms
       \ [ beforeEach ]
     × returns order details 888ms
       | [ beforeEach ]
     × returns 404 for non-existent order 905ms
       / [ beforeEach ]
   ❯ PATCH /api/admin/orders/:id/status (5) 3283ms
     × requires authentication 867ms
       \ [ beforeEach ]
     × updates order status 731ms
       | [ beforeEach ]
     × validates status enum values 664ms
       - [ beforeEach ]
     × allows adding notes when updating status 512ms
       \ [ beforeEach ]
     × returns 404 for non-existent order 510ms
       \ [ beforeEach ]
 ❯ tests/integration/storefront.routes.test.ts (5) 15886ms
   ❯ GET /api/storefront/cards (5) 6810ms
     × returns paginated cards with default params 1350ms
       | [ beforeEach ]
     × filters cards by game_id 1519ms
       | [ beforeEach ]
     × filters cards by search term 1319ms
       | [ beforeEach ]
     × respects pagination parameters 1299ms
       | [ beforeEach ]
     × returns 400 for invalid query parameters 1321ms
       | [ beforeEach ]
 ✓ tests/unit/auth.validateCredentials.test.ts (4)
 ✓ tests/unit/slugify.test.ts (1)
 ✓ tests/unit/utils.test.ts (43)
 ✓ tests/unit/validation.test.ts (10)

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Suites 1 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/integration/cards.search.test.ts [ tests/integration/cards.search.test.ts ]
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/integration/cards.search.test.ts:15:3

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/47]⎯

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 46 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > completes a full customer journey from browsing to order placement
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:30:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/47]⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > handles out-of-stock scenario gracefully
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:159:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/47]⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > handles concurrent orders for the same item
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:199:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/47]⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > allows admin to cancel an order and restore inventory
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:253:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/47]⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > validates customer input sanitization during checkout
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:325:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/47]⎯

 FAIL  tests/e2e/checkout.flow.test.ts > Complete Checkout Flow (E2E) > handles multiple items in a single order
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/e2e/checkout.flow.test.ts:382:21

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/47]⎯

 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > requires authentication
 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > creates new inventory with valid data
 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > updates existing inventory on conflict
 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > rejects invalid card_id
 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > rejects negative stock quantity
 FAIL  tests/integration/inventory.routes.test.ts > POST /api/admin/inventory > rejects missing required fields
 FAIL  tests/integration/inventory.routes.test.ts > GET /api/admin/inventory > requires authentication
 FAIL  tests/integration/inventory.routes.test.ts > GET /api/admin/inventory > returns paginated inventory list
 FAIL  tests/integration/inventory.routes.test.ts > GET /api/admin/inventory > filters inventory by card_id
 FAIL  tests/integration/inventory.routes.test.ts > PATCH /api/admin/inventory/:id > requires authentication
 FAIL  tests/integration/inventory.routes.test.ts > PATCH /api/admin/inventory/:id > updates inventory stock quantity
 FAIL  tests/integration/inventory.routes.test.ts > PATCH /api/admin/inventory/:id > updates inventory price
 FAIL  tests/integration/inventory.routes.test.ts > PATCH /api/admin/inventory/:id > returns 404 for non-existent inventory
 FAIL  tests/integration/inventory.routes.test.ts > DELETE /api/admin/inventory/:id > requires authentication
 FAIL  tests/integration/inventory.routes.test.ts > DELETE /api/admin/inventory/:id > deletes inventory item
 FAIL  tests/integration/inventory.routes.test.ts > DELETE /api/admin/inventory/:id > returns 404 for non-existent inventory
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/integration/inventory.routes.test.ts:36:3

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/47]⎯

 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > creates a new order with valid data
 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > validates required customer fields
 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > validates items array is not empty
 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > validates item quantity limits
 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > validates email format
 FAIL  tests/integration/orders.routes.test.ts > POST /api/orders > handles transaction rollback on inventory update failure
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders > requires authentication
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders > returns paginated orders list
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders > filters orders by status
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders > supports pagination
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders > searches orders by customer email
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders/:id > requires authentication
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders/:id > returns order details
 FAIL  tests/integration/orders.routes.test.ts > GET /api/admin/orders/:id > returns 404 for non-existent order
 FAIL  tests/integration/orders.routes.test.ts > PATCH /api/admin/orders/:id/status > requires authentication
 FAIL  tests/integration/orders.routes.test.ts > PATCH /api/admin/orders/:id/status > updates order status
 FAIL  tests/integration/orders.routes.test.ts > PATCH /api/admin/orders/:id/status > validates status enum values
 FAIL  tests/integration/orders.routes.test.ts > PATCH /api/admin/orders/:id/status > allows adding notes when updating status
 FAIL  tests/integration/orders.routes.test.ts > PATCH /api/admin/orders/:id/status > returns 404 for non-existent order
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedCards tests/setup/db.ts:36:17
     34|     );
     35|
     36|     const res = await client.query(
       |                 ^
     37|       `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     38|        VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/integration/orders.routes.test.ts:36:3

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/47]⎯

 FAIL  tests/integration/storefront.routes.test.ts > GET /api/storefront/cards > returns paginated cards with default params
 FAIL  tests/integration/storefront.routes.test.ts > GET /api/storefront/cards > filters cards by game_id
 FAIL  tests/integration/storefront.routes.test.ts > GET /api/storefront/cards > filters cards by search term
 FAIL  tests/integration/storefront.routes.test.ts > GET /api/storefront/cards > respects pagination parameters
 FAIL  tests/integration/storefront.routes.test.ts > GET /api/storefront/cards > returns 400 for invalid query parameters
error: null value in column "game_id" of relation "cards" violates not-null constraint
 ❯ ../../node_modules/.pnpm/pg@8.16.3/node_modules/pg/lib/client.js:545:17
 ❯ Module.seedMultipleCards tests/setup/db.ts:83:7
     81|
     82|     for (const card of cards) {
     83|       await client.query(
       |       ^
     84|         `INSERT INTO cards (id, set_id, card_number, finish, name, sku)
     85|          VALUES ($1,$2,$3,$4,$5,$6)
 ❯ tests/integration/storefront.routes.test.ts:26:5

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/47]⎯

 Test Files  5 failed | 6 passed (11)
      Tests  46 failed | 71 passed | 1 skipped (118)
   Start at  06:35:29
   Duration  29.15s (transform 547ms, setup 0ms, collect 6.99s, tests 116.76s, environment 2ms, prepare 1.38s)

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit