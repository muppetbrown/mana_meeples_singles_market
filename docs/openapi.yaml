openapi: 3.1.0
info:
  title: Mana & Meeples Singles Market API
  version: "1.0.0"
  description: |
    Public API for card listings, counts, and variation facets.
    Query coercion: numbers/booleans accepted as strings (e.g., `?game_id=1`, `?in_stock=true`).

servers:
  - url: https://api.manaandmeeples.co.nz/api
    description: Production API

tags:
  - name: Health
  - name: Cards
  - name: Variations

paths:
  /healthz:
    get:
      tags: [Health]
      summary: Liveness probe
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /readyz:
    get:
      tags: [Health]
      summary: Readiness probe
      responses:
        "200":
          description: Service readiness status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Readiness"

  /cards:
    get:
      tags: [Cards]
      summary: List cards
      description: |
        Returns cards matching filters and pagination.
        Facet params accept CSV (`treatment=EXTENDED,BORDERLESS`) or repeated keys (`treatment=EXTENDED&treatment=BORDERLESS`).
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/order"
        - $ref: "#/components/parameters/game_id"
        - $ref: "#/components/parameters/set_id"
        - $ref: "#/components/parameters/in_stock"
        - $ref: "#/components/parameters/q"
        - $ref: "#/components/parameters/treatment"
        - $ref: "#/components/parameters/border_color"
        - $ref: "#/components/parameters/finish"
        - $ref: "#/components/parameters/promo_type"
        - $ref: "#/components/parameters/frame_effect"
        - $ref: "#/components/parameters/min_price"
        - $ref: "#/components/parameters/max_price"
      responses:
        "200":
          description: Cards page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardsList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /cards/count:
    get:
      tags: [Cards]
      summary: Count cards
      description: Returns count of cards matching the provided filters.
      parameters:
        - $ref: "#/components/parameters/game_id"
        - $ref: "#/components/parameters/set_id"
        - $ref: "#/components/parameters/in_stock"
        - $ref: "#/components/parameters/q"
        - $ref: "#/components/parameters/treatment"
        - $ref: "#/components/parameters/border_color"
        - $ref: "#/components/parameters/finish"
        - $ref: "#/components/parameters/promo_type"
        - $ref: "#/components/parameters/frame_effect"
        - $ref: "#/components/parameters/min_price"
        - $ref: "#/components/parameters/max_price"
      responses:
        "200":
          description: Count result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /variations:
    get:
      tags: [Variations]
      summary: Variation facets for a set or game
      description: |
        Returns distinct variation/facet values from the materialized/view-backed source.
        Requires either `set_id` or `game_id`.
      parameters:
        - $ref: "#/components/parameters/set_id_required_or_game_id"
        - $ref: "#/components/parameters/game_id_required_or_set_id"
      responses:
        "200":
          description: Facet values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariationFacets"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    page:
      name: page
      in: query
      description: 1-based page index
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    per_page:
      name: per_page
      in: query
      description: Page size (max 100)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 24
    sort:
      name: sort
      in: query
      description: Sort column (whitelisted server-side)
      required: false
      schema:
        type: string
        enum: [name, number, price, set]
        default: name
    order:
      name: order
      in: query
      description: Sort order
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: asc
    game_id:
      name: game_id
      in: query
      required: false
      description: Filter by game id
      schema:
        type: integer
        minimum: 1
    set_id:
      name: set_id
      in: query
      required: false
      description: Filter by set id
      schema:
        type: integer
        minimum: 1
    in_stock:
      name: in_stock
      in: query
      required: false
      description: Only include cards with inventory (stock > 0)
      schema:
        type: boolean
    q:
      name: q
      in: query
      required: false
      description: Full-text search query
      schema:
        type: string
        minLength: 1
        maxLength: 100
    # CSV (form, explode=false) and also accept repeated keys (server supports both)
    treatment:
      name: treatment
      in: query
      required: false
      description: Filter by card treatment(s)
      style: form
      explode: false
      schema:
        type: array
        items: { type: string }
    border_color:
      name: border_color
      in: query
      required: false
      description: Filter by border color(s)
      style: form
      explode: false
      schema:
        type: array
        items: { type: string }
    finish:
      name: finish
      in: query
      required: false
      description: Filter by finish(es)
      style: form
      explode: false
      schema:
        type: array
        items: { type: string }
    promo_type:
      name: promo_type
      in: query
      required: false
      description: Filter by promo type(s)
      style: form
      explode: false
      schema:
        type: array
        items: { type: string }
    frame_effect:
      name: frame_effect
      in: query
      required: false
      description: Filter by frame effect(s)
      style: form
      explode: false
      schema:
        type: array
        items: { type: string }
    min_price:
      name: min_price
      in: query
      required: false
      description: Minimum price filter
      schema:
        type: number
        minimum: 0
    max_price:
      name: max_price
      in: query
      required: false
      description: Maximum price filter
      schema:
        type: number
        minimum: 0

    # Mutually optional: one of set_id or game_id must be provided; documented separately for clarity
    set_id_required_or_game_id:
      name: set_id
      in: query
      required: false
      description: Set id (required if `game_id` not provided)
      schema:
        type: integer
        minimum: 1
    game_id_required_or_set_id:
      name: game_id
      in: query
      required: false
      description: Game id (required if `set_id` not provided)
      schema:
        type: integer
        minimum: 1

  responses:
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation:
              value:
                error: Invalid query parameters
                details:
                  fieldErrors:
                    game_id: ["Expected number, received string"]
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    ErrorResponse:
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
        details:
          description: Optional validation details
          type: object
    CountResponse:
      type: object
      additionalProperties: false
      properties:
        count:
          type: integer
          minimum: 0
      required: [count]

    Health:
      type: object
      properties:
        status: { type: string, example: ok }
        service: { type: string, example: api }
        at: { type: string, format: date-time }
      required: [status, at]

    Readiness:
      type: object
      properties:
        status: { type: string, example: ready }
        deps:
          type: object
          additionalProperties: true
          example: { db: "unknown" }
        at: { type: string, format: date-time }
      required: [status, at]

    VariationFacets:
      type: object
      properties:
        treatments:
          type: array
          items: { type: string }
        border_colors:
          type: array
          items: { type: string }
        finishes:
          type: array
          items: { type: string }
        promo_types:
          type: array
          items: { type: string }
        frame_effects:
          type: array
          items: { type: string }
      required:
        - treatments
        - border_colors
        - finishes
        - promo_types
        - frame_effects

    # Minimal Card model: reflect columns you actually return.
    # Adjust as needed if your SELECT includes additional fields.
    Card:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        game_id: { type: integer }
        set_id: { type: integer }
        card_number: { type: string }
        finish: { type: string }
        treatment: { type: string }
        border_color: { type: string }
        frame_effect: { type: string }
        promo_type: { type: string }
        sku: { type: string }
      additionalProperties: true

    CardsList:
      type: array
      items:
        $ref: "#/components/schemas/Card"
