openapi: 3.0.3
info:
  title: TCG Singles Market API
  description: API for the Trading Card Game Singles Market application
  version: 1.0.0
  contact:
    name: TCG Singles Market
    email: support@tcgsingles.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.tcgsingles.com
    description: Production server

paths:
  /games:
    get:
      summary: Get all active games
      description: Retrieves a list of all active games available in the system
      tags:
        - Games
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
              example:
                - id: 1
                  name: "Magic: The Gathering"
                  code: "mtg"
                  active: true
                - id: 2
                  name: "Pokemon"
                  code: "pokemon"
                  active: true
        '500':
          $ref: '#/components/responses/InternalServerError'

  /cards:
    get:
      summary: Search and filter cards
      description: Get cards with filtering, searching, and pagination
      tags:
        - Cards
      parameters:
        - name: search
          in: query
          description: Search term for card names
          schema:
            type: string
            maxLength: 100
        - name: game
          in: query
          description: Game filter
          schema:
            type: string
            enum: [all, mtg, pokemon, onepiece]
        - name: rarity
          in: query
          description: Card rarity filter
          schema:
            type: string
        - name: quality
          in: query
          description: Card condition filter
          schema:
            type: string
            enum: [all, NM, LP, MP, HP, DMG]
        - name: foilType
          in: query
          description: Foil type filter
          schema:
            type: string
            enum: [all, Regular, Foil, Etched]
        - name: minPrice
          in: query
          description: Minimum price filter
          schema:
            type: number
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          schema:
            type: number
            minimum: 0
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, price, set, rarity]
            default: name
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of cards per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /orders:
    post:
      summary: Create a new order
      description: Creates a new order with comprehensive validation and stock management
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
            example:
              customer:
                email: "customer@example.com"
                phone: "+64-21-123-4567"
                name: "John Doe"
              items:
                - inventory_id: "abc123"
                  quantity: 2
                  price: 15.99
              total: 31.98
              currency: "NZD"
              timestamp: "2023-12-01T10:30:00Z"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              example:
                success: true
                orderId: "order_789"
                message: "Order created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Insufficient stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Insufficient stock for requested items"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      summary: Health check endpoint
      description: Check the health status of the API and its dependencies
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  timestamp:
                    type: string
                    format: date-time
                  database:
                    type: string
                    enum: [connected, disconnected]
                  uptime:
                    type: number
                    description: Server uptime in seconds
              example:
                status: "healthy"
                timestamp: "2023-12-01T10:30:00Z"
                database: "connected"
                uptime: 86400
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Game:
      type: object
      properties:
        id:
          type: integer
          description: Unique game identifier
        name:
          type: string
          description: Game display name
        code:
          type: string
          description: Game code identifier
        active:
          type: boolean
          description: Whether the game is active
      required:
        - id
        - name
        - code
        - active

    Card:
      type: object
      properties:
        id:
          type: string
          description: Unique card identifier
        name:
          type: string
          description: Card name
        set_name:
          type: string
          description: Set or expansion name
        card_number:
          type: string
          description: Card number within the set
        rarity:
          type: string
          description: Card rarity
        image_url:
          type: string
          format: uri
          description: URL to card image
        variations:
          type: array
          items:
            $ref: '#/components/schemas/CardVariation'
      required:
        - id
        - name
        - set_name
        - variations

    CardVariation:
      type: object
      properties:
        inventory_id:
          type: string
          description: Unique inventory identifier
        quality:
          type: string
          enum: [NM, LP, MP, HP, DMG]
          description: Card condition
        price:
          type: number
          format: decimal
          minimum: 0
          description: Price in base currency
        stock:
          type: integer
          minimum: 0
          description: Available quantity
        foil_type:
          type: string
          enum: [Regular, Foil, Etched]
          description: Foil treatment type
        language:
          type: string
          description: Card language
      required:
        - inventory_id
        - quality
        - price
        - stock
        - foil_type
        - language

    Customer:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          description: Customer email address
        phone:
          type: string
          pattern: '^[\+]?[\d\-\s\(\)]{10,20}$'
          description: Customer phone number
        name:
          type: string
          maxLength: 255
          description: Customer name
      required:
        - email
        - phone
        - name

    OrderItem:
      type: object
      properties:
        inventory_id:
          type: string
          description: Inventory item identifier
        quantity:
          type: integer
          minimum: 1
          maximum: 99
          description: Quantity to order
        price:
          type: number
          format: decimal
          minimum: 0
          description: Price per item
      required:
        - inventory_id
        - quantity
        - price

    OrderRequest:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          minItems: 1
          maxItems: 100
        total:
          type: number
          format: decimal
          minimum: 0
          description: Total order amount
        currency:
          type: string
          enum: [USD, NZD, EUR, GBP, CAD, AUD]
          description: Currency code
        timestamp:
          type: string
          format: date-time
          description: Order timestamp
      required:
        - customer
        - items
        - total
        - currency
        - timestamp

    OrderResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the order was successful
        orderId:
          type: string
          description: Generated order identifier
        message:
          type: string
          description: Success message
      required:
        - success
        - orderId
        - message

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        pages:
          type: integer
          minimum: 0
          description: Total number of pages
      required:
        - page
        - limit
        - total
        - pages

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: string
          description: Additional error details
      required:
        - error

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Validation failed"
            details:
              - "Email is required"
              - "Quantity must be between 1 and 99"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"

  securitySchemes:
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for admin authentication

# Rate limiting information
x-rateLimit:
  normal: "100 requests per minute"
  strict: "30 requests per minute for expensive operations"
  lenient: "200 requests per minute for lightweight operations"